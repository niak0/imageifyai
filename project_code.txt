// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:imageifyai/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
class RadiusConstants {
  static const double small = 8.0;
  static const double medium = 12.0;
  static const double large = 16.0;
}
class AppConstants {
  // App bilgileri
  static const String appName = "ImageifyAI";
  static const String appVersion = "1.0.0";

  // Asset yolları
  static const String logoPath = "assets/images/logo.png";
  static const String placeholderImage = "assets/images/placeholder.png";

  // Cache keys
  static const String tokenKey = "token";
  static const String userKey = "user";

  // Sayfa route'ları
  static const String homePath = "/home";
  static const String loginPath = "/login";
  static const String profilePath = "/profile";
}
import 'package:flutter/material.dart';

class AppAnimation {
  // Süre sabitleri
  static const Duration fast = Duration(milliseconds: 200);
  static const Duration normal = Duration(milliseconds: 300);
  static const Duration slow = Duration(milliseconds: 500);

  // Curve sabitleri
  static const Curve defaultCurve = Curves.easeInOut;
  static const Curve bouncyCurve = Curves.elasticOut;
  static const Curve sharpCurve = Curves.easeOutExpo;

  // Scale değerleri
  static const double scaleNormal = 1.0;
  static const double scalePressed = 0.95;
  static const double scaleSelected = 1.1;

  // Opacity değerleri
  static const double opacityVisible = 1.0;
  static const double opacityHidden = 0.0;
  static const double opacityDim = 0.5;

  // Container animasyonları için
  static AnimatedContainer fadeContainer({
    required Widget child,
    required bool isVisible,
    Duration duration = normal,
    Curve curve = defaultCurve,
  }) {
    return AnimatedContainer(
      duration: duration,
      curve: curve,
      child: AnimatedOpacity(
        duration: duration,
        curve: curve,
        opacity: isVisible ? opacityVisible : opacityHidden,
        child: child,
      ),
    );
  }

  // Scale animasyonları için
  static AnimatedScale scaleAnimation({
    required Widget child,
    required bool isSelected,
    Duration duration = fast,
    Curve curve = defaultCurve,
  }) {
    return AnimatedScale(
      scale: isSelected ? scaleSelected : scaleNormal,
      duration: duration,
      curve: curve,
      child: child,
    );
  }

  // Opacity animasyonları için
  static AnimatedOpacity fadeAnimation({
    required Widget child,
    required bool isVisible,
    Duration duration = fast,
    Curve curve = defaultCurve,
  }) {
    return AnimatedOpacity(
      opacity: isVisible ? opacityVisible : opacityHidden,
      duration: duration,
      curve: curve,
      child: child,
    );
  }

  // Container decorations için
  static AnimatedContainer containerAnimation({
    required Widget child,
    required bool isSelected,
    required BuildContext context,
    Duration duration = normal,
    Curve curve = defaultCurve,
  }) {
    return AnimatedContainer(
      duration: duration,
      curve: curve,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: isSelected ? Theme.of(context).colorScheme.primary : Theme.of(context).colorScheme.primary.withOpacity(0.1),
          width: 2,
        ),
        boxShadow: isSelected
            ? [
                BoxShadow(
                  color: Theme.of(context).colorScheme.primary.withOpacity(0.2),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                ),
              ]
            : [],
      ),
      child: child,
    );
  }

  // Slide animasyonları için
  static SlideTransition slideAnimation({
    required Widget child,
    required Animation<double> animation,
    SlideDirection direction = SlideDirection.right,
  }) {
    return SlideTransition(
      position: Tween<Offset>(
        begin: direction.offset,
        end: Offset.zero,
      ).animate(CurvedAnimation(
        parent: animation,
        curve: defaultCurve,
      )),
      child: child,
    );
  }
}

// Slide yönleri için enum
enum SlideDirection {
  left(Offset(-1.0, 0.0)),
  right(Offset(1.0, 0.0)),
  up(Offset(0.0, -1.0)),
  down(Offset(0.0, 1.0));

  final Offset offset;
  const SlideDirection(this.offset);
}
class PaddingConstants {
  static const double small = 8.0;
  static const double medium = 16.0;
  static const double large = 24.0;
}
import 'package:flutter/material.dart';

class ColorConstants {
  // Ana renk ve tonları
  static const Color primary = Color(0xFF6C72CB);
  static const Color secondary = Color(0xFF8687E7);
  static const Color tertiary = Color(0xFF7C7FF3);

  static const List<Color> primaryGradient = [
    Color(0xFF6C72CB),
    Color(0xFF8687E7),
  ];

  static const Color background = Color(0xFF0F0F0F);
  static const Color surface = Color(0xFF1A1A1A);
  static const Color surfaceVariant = Color(0xFF252525);

  static const Color textPrimary = Color(0xFFFAFAFA);
  static const Color textSecondary = Color(0xFFABABAB);

  static const Color success = Color(0xFF6C72CB);
  static const Color error = Color(0xFFE26D5C);
}
import 'package:flutter/material.dart';
import '../constants/color_constants.dart';

class AppTheme {
  static ThemeData get darkTheme {
    return ThemeData(
      // Ana Tema Renkleri
      primaryColor: ColorConstants.primary,
      scaffoldBackgroundColor: ColorConstants.background,
      colorScheme: const ColorScheme.dark(
        primary: ColorConstants.primary,
        secondary: ColorConstants.primary,
        surface: ColorConstants.surface,
        onPrimary: Colors.white,
        onSecondary: Colors.white,
        onSurface: ColorConstants.textPrimary,
      ),

      // AppBar Teması
      appBarTheme: const AppBarTheme(
        elevation: 0,
        centerTitle: true,
        backgroundColor: Colors.transparent,
        titleTextStyle: TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: ColorConstants.textPrimary,
        ),
        iconTheme: IconThemeData(
          color: ColorConstants.textPrimary,
        ),
      ),

      // Buton Teması
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: ColorConstants.primary,
          foregroundColor: Colors.white,
          elevation: 0,
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),

      // Card Teması
      cardTheme: CardTheme(
        color: ColorConstants.surface,
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
          side: BorderSide(
            color: ColorConstants.primary.withOpacity(0.1),
          ),
        ),
      ),

      // Input Dekorasyon Teması
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: ColorConstants.surface,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: BorderSide(
            color: ColorConstants.primary.withOpacity(0.1),
          ),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: BorderSide(
            color: ColorConstants.primary.withOpacity(0.1),
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: const BorderSide(
            color: ColorConstants.primary,
          ),
        ),
      ),

      // Metin Teması
      textTheme: const TextTheme(
        headlineLarge: TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: ColorConstants.textPrimary,
        ),
        headlineMedium: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
          color: ColorConstants.textPrimary,
        ),
        bodyLarge: TextStyle(
          fontSize: 16,
          color: ColorConstants.textPrimary,
        ),
        bodyMedium: TextStyle(
          fontSize: 14,
          color: ColorConstants.textPrimary,
        ),
        bodySmall: TextStyle(
          fontSize: 12,
          color: ColorConstants.textSecondary,
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class FadeRoute<T> extends PageRouteBuilder<T> {
  final Widget page;

  FadeRoute({required this.page})
      : super(
          pageBuilder: (context, animation, secondaryAnimation) => page,
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
          transitionDuration: const Duration(milliseconds: 300),
        );
}
import 'package:image_picker/image_picker.dart';

class ImageService {
  final ImagePicker _picker = ImagePicker();

  Future<String?> pickImage(ImageSource source) async {
    try {
      final XFile? pickedFile = await _picker.pickImage(
        source: source,
        maxWidth: 1000,
        maxHeight: 1000,
        imageQuality: 85,
      );

      if (pickedFile != null) {
        return pickedFile.path;
      }
      return null;
    } catch (e) {
      rethrow;
    }
  }
}
import 'package:flutter/material.dart';
import '../constants/color_constants.dart';

class GradientScaffold extends StatelessWidget {
  final Widget body;
  final PreferredSizeWidget? appBar;
  final Widget? bottomNavigationBar;
  final Widget? floatingActionButton;
  final FloatingActionButtonLocation? floatingActionButtonLocation;
  final bool resizeToAvoidBottomInset;

  const GradientScaffold({
    super.key,
    required this.body,
    this.appBar,
    this.bottomNavigationBar,
    this.floatingActionButton,
    this.floatingActionButtonLocation,
    this.resizeToAvoidBottomInset = true,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: ColorConstants.background,
      appBar: appBar,
      bottomNavigationBar: bottomNavigationBar,
      floatingActionButton: floatingActionButton,
      floatingActionButtonLocation: floatingActionButtonLocation,
      resizeToAvoidBottomInset: resizeToAvoidBottomInset,
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              ColorConstants.background,
              ColorConstants.primary.withOpacity(0.05),
            ],
          ),
        ),
        child: body,
      ),
    );
  }
}
import 'package:flutter/material.dart';

class FiltersViewModel extends ChangeNotifier {
  // Filters özelliğine özgü state ve business logic
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../viewmodel/filters_view_model.dart';

class FiltersView extends StatelessWidget {
  const FiltersView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Filters')),
      body: Consumer<FiltersViewModel>(
        builder: (context, viewModel, child) {
          return const Center(
            child: Text('Filters Feature'),
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:imageifyai/features/home/models/ai_feature.dart';

class HomeViewModel extends ChangeNotifier {
  AIFeature _selectedFeature = AIFeature.textToImage;

  AIFeature get selectedFeature => _selectedFeature;

  void setFeature(AIFeature feature) {
    if (feature == _selectedFeature) return;
    _selectedFeature = feature;
    notifyListeners();
  }
}
import 'package:flutter/material.dart';
import 'package:imageifyai/core/constants/color_constants.dart';
import 'package:imageifyai/features/avatars/view/avatars_view.dart';
import 'package:imageifyai/features/baby/view/baby_view.dart';
import 'package:imageifyai/features/filters/view/filters_view.dart';
import 'package:imageifyai/features/tattoo/view/tattoo_view.dart';
import 'package:imageifyai/features/text_to_image/view/text_to_image_view.dart';

class AIFeature {
  final String title;
  final String description;
  final IconData icon;
  final Color color;
  final Widget page;

  const AIFeature._({
    required this.title,
    required this.description,
    required this.icon,
    required this.color,
    required this.page,
  });

  static const avatars = AIFeature._(
    title: 'Avatarlar',
    description: 'Kişiselleştirilmiş AI avatarları oluşturun',
    icon: Icons.face,
    color: ColorConstants.tertiary,
    page: AvatarsView(),
  );

  static const baby = AIFeature._(
    title: 'AI Bebek',
    description: 'Gelecekteki bebeğinizi görün',
    icon: Icons.child_care,
    color: ColorConstants.tertiary,
    page: BabyView(),
  );

  static const filters = AIFeature._(
    title: 'Filtreler',
    description: 'Fotoğraflarınıza sanatsal stiller uygulayın',
    icon: Icons.filter,
    color: ColorConstants.tertiary,
    page: FiltersView(),
  );

  static const tattoo = AIFeature._(
    title: 'Dövme',
    description: 'AI ile dövme tasarımları oluşturun',
    icon: Icons.brush,
    color: ColorConstants.tertiary,
    page: TattooView(),
  );

  static const textToImage = AIFeature._(
    title: 'Metin-Görüntü',
    description: 'Metinden AI görüntüleri oluşturun',
    icon: Icons.text_fields,
    color: ColorConstants.tertiary,
    page: TextToImageView(),
  );

  static final List<AIFeature> values = [
    avatars,
    baby,
    filters,
    tattoo,
    textToImage,
  ];
}
import 'package:flutter/material.dart';
import 'package:imageifyai/features/home/models/ai_feature.dart';
import 'package:imageifyai/features/home/viewmodel/home_view_model.dart';
import 'package:imageifyai/features/home/view/widgets/feature_card.dart';
import 'package:imageifyai/features/home/view/widgets/grid_pattern.dart';
import 'package:provider/provider.dart';
import '../../../core/constants/color_constants.dart';
import '../../../core/constants/padding_constants.dart';
import '../../../core/routes/fade_route.dart';

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => HomeViewModel(),
      child: const _HomeViewContent(),
    );
  }
}

class _HomeViewContent extends StatelessWidget {
  const _HomeViewContent();

  void _navigateToFeature(BuildContext context, AIFeature feature) {
    Navigator.push(
      context,
      FadeRoute(page: feature.page),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: ColorConstants.background,
      body: CustomScrollView(
        slivers: [
          // Özel App Bar
          SliverAppBar(
            expandedHeight: 150,
            floating: false,
            pinned: true,
            backgroundColor: ColorConstants.background,
            flexibleSpace: FlexibleSpaceBar(
              title: const Text(
                'AI Studio',
                style: TextStyle(
                  color: ColorConstants.textPrimary,
                  fontWeight: FontWeight.bold,
                ),
              ),
              background: Container(
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: ColorConstants.primaryGradient,
                  ),
                ),
                child: const Stack(
                  children: [
                    // Arka plan deseni
                    Positioned.fill(
                      child: Opacity(
                        opacity: 0.1,
                        child: GridPattern(),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // İçerik
          SliverPadding(
            padding: const EdgeInsets.all(PaddingConstants.medium),
            sliver: SliverGrid(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 16,
                crossAxisSpacing: 16,
                childAspectRatio: 0.85,
              ),
              delegate: SliverChildBuilderDelegate(
                (context, index) => FeatureCard(
                  feature: AIFeature.values[index],
                  onTap: () => _navigateToFeature(context, AIFeature.values[index]),
                ),
                childCount: AIFeature.values.length,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';

class GridPattern extends StatelessWidget {
  const GridPattern({super.key});

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      painter: GridPainter(),
    );
  }
}

class GridPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    // Noktalar için
    final dotPaint = Paint()
      ..color = const Color(0xFF8687E7).withOpacity(0.15)
      ..strokeWidth = 2
      ..style = PaintingStyle.fill;

    // Büyük daireler için
    final circlePaint = Paint()
      ..color = const Color(0xFF6C72CB).withOpacity(0.03)
      ..style = PaintingStyle.fill;

    // Arka planda büyük daireler
    canvas.drawCircle(
      Offset(size.width * 0.2, size.height * 0.3),
      100,
      circlePaint,
    );

    canvas.drawCircle(
      Offset(size.width * 0.8, size.height * 0.7),
      150,
      circlePaint,
    );

    // Nokta deseni
    const spacing = 30.0;
    for (double x = 0; x < size.width; x += spacing) {
      for (double y = 0; y < size.height; y += spacing) {
        canvas.drawCircle(
          Offset(x, y),
          1,
          dotPaint,
        );
      }
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
import 'package:flutter/material.dart';
import 'package:imageifyai/core/constants/color_constants.dart';
import 'package:imageifyai/features/home/models/ai_feature.dart';

class FeatureCard extends StatelessWidget {
  final AIFeature feature;
  final VoidCallback onTap;

  const FeatureCard({
    required this.feature,
    required this.onTap,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          color: ColorConstants.surfaceVariant,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Feature görseli
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      feature.color.withOpacity(0.8),
                      feature.color,
                    ],
                  ),
                ),
                child: Center(
                  child: Icon(
                    feature.icon,
                    size: 40,
                    color: Colors.white,
                  ),
                ),
              ),
            ),

            // Feature bilgileri
            Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    feature.title,
                    style: const TextStyle(
                      color: ColorConstants.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    feature.description,
                    style: const TextStyle(
                      color: ColorConstants.textSecondary,
                      fontSize: 12,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class TattooViewModel extends ChangeNotifier {
  // Tattoo özelliğine özgü state ve business logic
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../viewmodel/tattoo_view_model.dart';

class TattooView extends StatelessWidget {
  const TattooView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Tattoo Mode')),
      body: Consumer<TattooViewModel>(
        builder: (context, viewModel, child) {
          return const Center(
            child: Text('Tattoo Feature'),
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';

class ProfileView extends StatefulWidget {
  const ProfileView({super.key});

  @override
  State<ProfileView> createState() => _ProfileViewState();
}

class _ProfileViewState extends State<ProfileView> {
  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      backgroundColor: Colors.black,

      body: Center(
        child: Text('Profile'),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'navigation_bar_manager.dart';

class ProjectNavigationBar extends StatelessWidget {
  const ProjectNavigationBar({super.key});

  @override
  Widget build(BuildContext context) {
    NavigationBarManager navigationBarManager = context.watch<NavigationBarManager>();
    PageController pageController = PageController();

    return Scaffold(
      appBar: AppBar(
        title: const Text("Anasayfa"),
      ),
      body: PageView(
        physics: const NeverScrollableScrollPhysics(),
        controller: pageController,
        // onPageChanged: (index) {
        //   navigationBarManager.setIndex(index);
        // },
        children: navigationBarManager.pages,
      ),
      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: Colors.transparent,
        currentIndex: navigationBarManager.currentIndex,
        onTap: (index) {
          pageController.jumpToPage(index);
          navigationBarManager.setIndex(index);
        },
        items: navigationBarManager.navBarItems,
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:imageifyai/features/profile/profile_view.dart';

import '../home/view/home_view.dart';

class NavigationBarManager with ChangeNotifier {
  int _currentIndex = 0;
  final _home = HomeView();
  final _profile = const ProfileView();

  int get currentIndex => _currentIndex;

  void setIndex(int index) {
    if (index == _currentIndex) return;
    _currentIndex = index;
    notifyListeners();
  }

  List<BottomNavigationBarItem> navBarItems = const [
    BottomNavigationBarItem(icon: Icon(Icons.home_outlined), label: 'Anasayfa'),
    BottomNavigationBarItem(icon: Icon(Icons.notification_add_outlined), label: 'Fallarım'),
    BottomNavigationBarItem(icon: Icon(Icons.person_outline), label: 'Profil'),
  ];

  String getAppBarTitle() => navBarItems[_currentIndex].label ?? "null";

  List<Widget> get _pages => [_home, _profile];
  List<Widget> get pages => _pages;
}
import 'dart:math';

import 'package:flutter/material.dart';

class TextToImageViewModel extends ChangeNotifier {
  final List<String> _samplePrompts = [
    'Yağmurlu bir günde gökkuşağının altında dans eden unicorn',
    'Neon ışıklarla aydınlatılmış cyberpunk şehir manzarası',
    'Antik bir tapınakta meditasyon yapan robot keşişler',
    'Kristal dağların arasında uçan steampunk hava gemisi',
    'Deniz altında bir bahçede çay partisi veren denizkızları',
    'Uzay istasyonunda kedi cafe işleten astronotlar',
    'Bulutların üzerinde yüzen devasa kitap kütüphanesi',
    'Kuzey ışıkları altında bale yapan kutup ayıları',
  ];

  String getRandomPrompt() {
    final random = Random();
    return _samplePrompts[random.nextInt(_samplePrompts.length)];
  }

  String _prompt = '';
  Styles? _selectedStyle;
  ImageSize _selectedSize = ImageSize.medium;
  ImageQuality _selectedQuality = ImageQuality.high;
  AIModel _selectedModel = AIModel.stableDiffusion;
  bool _isLoading = false;

  // Getters
  String get prompt => _prompt;
  Styles? get selectedStyle => _selectedStyle;
  ImageSize get selectedSize => _selectedSize;
  ImageQuality get selectedQuality => _selectedQuality;
  AIModel get selectedModel => _selectedModel;
  bool get isLoading => _isLoading;

  bool get canGenerate => _prompt.trim().length >= 10 && _selectedStyle != null && !_isLoading;

  // Setters
  void setPrompt(String value) {
    _prompt = value;
    notifyListeners();
  }

  void selectStyle(Styles style) {
    _selectedStyle = style;
    notifyListeners();
  }

  void setSize(ImageSize size) {
    _selectedSize = size;
    notifyListeners();
  }

  void setQuality(ImageQuality quality) {
    _selectedQuality = quality;
    notifyListeners();
  }

  void setModel(AIModel model) {
    _selectedModel = model;
    notifyListeners();
  }

  // Generate Image
  Future<void> generateImage() async {
    if (!canGenerate) return;

    try {
      _isLoading = true;
      notifyListeners();

      // API çağrısı yapılacak
      await Future.delayed(const Duration(seconds: 2)); // Örnek bekleme

      // Başarılı
      _isLoading = false;
      notifyListeners();
    } catch (e) {
      _isLoading = false;
      notifyListeners();
      rethrow;
    }
  }

  void reset() {
    _prompt = '';
    _selectedStyle = null;
    _selectedSize = ImageSize.medium;
    _selectedQuality = ImageQuality.high;
    _selectedModel = AIModel.stableDiffusion;
    _isLoading = false;
    notifyListeners();
  }
}

// Enums
enum Styles {
  realistic(
    title: 'Gerçekçi',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'ultra realistic, photorealistic, 8k, detailed',
  ),
  anime(
    title: 'Anime',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'anime style, manga, detailed illustration',
  ),
  digital(
    title: 'Dijital Sanat',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'digital art, concept art, detailed, vibrant',
  ),
  oil(
    title: 'Yağlı Boya',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'oil painting, traditional art, detailed brushstrokes',
  ),
  watercolor(
    title: 'Suluboya',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'watercolor painting, artistic, flowing colors',
  ),
  sketch(
    title: 'Karakalem',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'pencil sketch, detailed drawing, black and white',
  ),
  cartoon(
    title: 'Karikatür',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'cartoon style, colorful, fun, stylized',
  ),
  pixel(
    title: 'Piksel',
    imageUrl: 'https://picsum.photos/400/400',
    prompt: 'pixel art, retro gaming style, 16-bit',
  );

  final String title;
  final String imageUrl;
  final String prompt;

  const Styles({
    required this.title,
    required this.imageUrl,
    required this.prompt,
  });
}

enum ImageSize {
  small(width: 512, height: 512, title: '512x512'),
  medium(width: 768, height: 768, title: '768x768'),
  large(width: 1024, height: 1024, title: '1024x1024');

  final int width;
  final int height;
  final String title;

  const ImageSize({
    required this.width,
    required this.height,
    required this.title,
  });
}

enum ImageQuality {
  low(steps: 20, title: 'Düşük'),
  medium(steps: 35, title: 'Orta'),
  high(steps: 50, title: 'Yüksek');

  final int steps;
  final String title;

  const ImageQuality({
    required this.steps,
    required this.title,
  });
}

enum AIModel {
  stableDiffusion(
    title: 'Stable Diffusion',
    version: 'v2.1',
  ),
  dalle(
    title: 'DALL-E',
    version: '3',
  ),
  midjourney(
    title: 'Midjourney',
    version: 'v5',
  );

  final String title;
  final String version;

  const AIModel({
    required this.title,
    required this.version,
  });

  String get fullTitle => '$title $version';
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/widgets/gradient_scaffold.dart';
import '../viewmodel/text_to_image_view_model.dart';
import 'widgets/prompt_input.dart';
import 'widgets/styles_section.dart';
import 'widgets/settings_section.dart';
import 'widgets/generate_button.dart';

class TextToImageView extends StatelessWidget {
  const TextToImageView({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => TextToImageViewModel(),
      child: const _TextToImageContent(),
    );
  }
}

class _TextToImageContent extends StatelessWidget {
  const _TextToImageContent();

  @override
  Widget build(BuildContext context) {
    return GradientScaffold(
      appBar: AppBar(
        title: const Text('Metinden Görsele'),
        centerTitle: true,
      ),
      body: Consumer<TextToImageViewModel>(
        builder: (context, viewModel, child) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const PromptInput(),
                const SizedBox(height: 20),
                Text(
                  'Stil Seçin',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
                const SizedBox(height: 10),
                const StylesSection(),
                const SizedBox(height: 20),
                Text(
                  'Gelişmiş Ayarlar',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
                const SizedBox(height: 10),
                const SettingsSection(),
                const SizedBox(height: 30),
                const GenerateButton(),
              ],
            ),
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../viewmodel/text_to_image_view_model.dart';

class StylesSection extends StatelessWidget {
  const StylesSection({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 180,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
      ),
      child: ListView.builder(
        padding: const EdgeInsets.all(10),
        scrollDirection: Axis.horizontal,
        itemCount: Styles.values.length,
        itemBuilder: (context, index) {
          final style = Styles.values[index];
          return Padding(
            padding: const EdgeInsets.only(right: 15),
            child: _StyleCard(style: style),
          );
        },
      ),
    );
  }
}

class _StyleCard extends StatelessWidget {
  final Styles style;

  const _StyleCard({required this.style});

  @override
  Widget build(BuildContext context) {
    final viewModel = context.watch<TextToImageViewModel>();
    final isSelected = viewModel.selectedStyle == style;

    return GestureDetector(
      onTap: () => viewModel.selectStyle(style),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        width: 120,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(15),
          border: Border.all(
            color: isSelected ? Theme.of(context).colorScheme.primary : Colors.transparent,
            width: 2,
          ),
          boxShadow: isSelected
              ? [
                  BoxShadow(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                    blurRadius: 8,
                    offset: const Offset(0, 4),
                  ),
                ]
              : [],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(13),
          child: Stack(
            fit: StackFit.expand,
            children: [
              Image.network(
                style.imageUrl,
                fit: BoxFit.cover,
              ),
              Positioned(
                bottom: 0,
                left: 0,
                right: 0,
                child: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Colors.transparent,
                        Colors.black.withOpacity(0.7),
                      ],
                    ),
                  ),
                  child: Text(
                    style.title,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../viewmodel/text_to_image_view_model.dart';

class GenerateButton extends StatelessWidget {
  const GenerateButton({super.key});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: context.watch<TextToImageViewModel>().canGenerate
            ? () {
                // Generate işlemi
              }
            : null,
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
        ),
        child: const Text(
          'Görsel Oluştur',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../viewmodel/text_to_image_view_model.dart';

class PromptInput extends StatefulWidget {
  const PromptInput({super.key});

  @override
  State<PromptInput> createState() => _PromptInputState();
}

class _PromptInputState extends State<PromptInput> {
  final TextEditingController _controller = TextEditingController();
  final FocusNode _focusNode = FocusNode();

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  void _clearText() {
    _controller.clear();
    _focusNode.unfocus();
    context.read<TextToImageViewModel>().setPrompt('');
  }

  void _surpriseMe() {
    final viewModel = context.read<TextToImageViewModel>();
    final prompt = viewModel.getRandomPrompt(); // ViewModel'e ekleyeceğiz
    _controller.text = prompt;
    viewModel.setPrompt(prompt);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Prompt',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            Consumer<TextToImageViewModel>(
              builder: (context, viewModel, child) {
                return AnimatedOpacity(
                  duration: const Duration(milliseconds: 200),
                  opacity: viewModel.prompt.isNotEmpty ? 1.0 : 0.0,
                  child: IconButton(
                    onPressed: _clearText,
                    icon: const Icon(Icons.clear),
                    tooltip: 'Temizle',
                  ),
                );
              },
            ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
            ),
          ),
          child: Column(
            children: [
              TextField(
                controller: _controller,
                focusNode: _focusNode,
                maxLines: 4,
                style: Theme.of(context).textTheme.bodyLarge,
                decoration: InputDecoration(
                  hintText: 'Hayal ettiğiniz görseli detaylı bir şekilde anlatın...',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(20),
                    borderSide: BorderSide.none,
                  ),
                  contentPadding: const EdgeInsets.all(20),
                ),
                onChanged: (value) => context.read<TextToImageViewModel>().setPrompt(value),
              ),
              Consumer<TextToImageViewModel>(
                builder: (context, viewModel, child) {
                  return AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    height: viewModel.prompt.isEmpty ? 60 : 0,
                    padding: const EdgeInsets.only(
                      left: 20,
                      right: 20,
                      bottom: 15,
                    ),
                    child: AnimatedOpacity(
                      duration: const Duration(milliseconds: 200),
                      opacity: viewModel.prompt.isEmpty ? 1.0 : 0.0,
                      child: Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton.icon(
                          onPressed: viewModel.prompt.isEmpty ? _surpriseMe : null,
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 12,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30),
                            ),
                          ),
                          icon: const Icon(Icons.auto_awesome),
                          label: const Text('Sürpriz'),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ],
    );
  }
}
import 'package:flutter/material.dart';

class SettingsSection extends StatelessWidget {
  const SettingsSection({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
        ),
      ),
      child: Column(
        children: [
          _SettingTile(
            icon: Icons.photo_filter,
            title: 'Model',
            value: 'Stable Diffusion',
            onTap: () {},
          ),
          const Divider(height: 30),
          _SettingTile(
            icon: Icons.aspect_ratio,
            title: 'Boyut',
            value: '512x512',
            onTap: () {},
          ),
          const Divider(height: 30),
          _SettingTile(
            icon: Icons.tune,
            title: 'Kalite',
            value: 'Yüksek',
            onTap: () {},
          ),
        ],
      ),
    );
  }
}

class _SettingTile extends StatelessWidget {
  final IconData icon;
  final String title;
  final String value;
  final VoidCallback onTap;

  const _SettingTile({
    required this.icon,
    required this.title,
    required this.value,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(10),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 8),
        child: Row(
          children: [
            Icon(icon, color: Theme.of(context).colorScheme.primary),
            const SizedBox(width: 15),
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
            const Spacer(),
            Text(
              value,
              style: TextStyle(
                color: Theme.of(context).colorScheme.primary,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(width: 5),
            Icon(
              Icons.chevron_right,
              color: Theme.of(context).colorScheme.primary,
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class AdvanceSettings extends StatelessWidget {
  const AdvanceSettings({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: Colors.grey[900],
      ),
      child: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              const ListTile(
                contentPadding: EdgeInsets.zero,
                title: Text("Advanced Settings", style: TextStyle(color: Colors.white)),
                leading: Icon(Icons.settings),
                trailing: Icon(Icons.arrow_forward_ios),
              ),
              const SizedBox(height: 10),
              const ListTile(
                  contentPadding: EdgeInsets.zero, title: Text("Prompt", style: TextStyle(color: Colors.white)), leading: Icon(Icons.text_fields)),
              const SizedBox(height: 10),
              const ListTile(
                  contentPadding: EdgeInsets.zero, title: Text("Style", style: TextStyle(color: Colors.white)), leading: Icon(Icons.palette)),
              const SizedBox(height: 10),
              ListTile(
                contentPadding: EdgeInsets.zero,
                title: const Text("Model", style: TextStyle(color: Colors.white)),
                trailing: TextButton.icon(
                  onPressed: () {},
                  icon: const Icon(Icons.arrow_forward_ios),
                  label: const Text("View All"),
                ),
              ),
              ListTile(
                contentPadding: EdgeInsets.zero,
                title: const Text("Model", style: TextStyle(color: Colors.white)),
                trailing: TextButton.icon(
                  onPressed: () {},
                  icon: const Icon(Icons.arrow_forward_ios),
                  label: const Text("View All"),
                ),
              ),
              ListTile(
                contentPadding: EdgeInsets.zero,
                title: const Text("Model", style: TextStyle(color: Colors.white)),
                trailing: TextButton.icon(
                  onPressed: () {},
                  icon: const Icon(Icons.arrow_forward_ios),
                  label: const Text("View All"),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import '../../../core/services/image_service.dart';

class BabyViewModel extends ChangeNotifier {
  final ImageService _imageService = ImageService();

  String? parent1Image;
  String? parent2Image;
  Gender? selectedGender;
  bool isLoading = false;

  bool get canGenerate => parent1Image != null && parent2Image != null && selectedGender != null;

  Future<void> selectParent1Image(ImageSource source) async {
    try {
      isLoading = true;
      notifyListeners();

      final imagePath = await _imageService.pickImage(source);
      if (imagePath != null) {
        parent1Image = imagePath;
      }
    } catch (e) {
      debugPrint('Fotoğraf seçme hatası: $e');
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  Future<void> selectParent2Image(ImageSource source) async {
    try {
      isLoading = true;
      notifyListeners();

      final imagePath = await _imageService.pickImage(source);
      if (imagePath != null) {
        parent2Image = imagePath;
      }
    } catch (e) {
      debugPrint('Fotoğraf seçme hatası: $e');
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  void selectGender(Gender gender) {
    selectedGender = gender;
    notifyListeners();
  }

  void resetImages() {
    parent1Image = null;
    parent2Image = null;
    notifyListeners();
  }
}

enum Gender { male, female, surprise }
import 'package:flutter/material.dart';
import 'package:imageifyai/core/widgets/gradient_scaffold.dart';
import 'package:provider/provider.dart';
import '../../../core/constants/color_constants.dart';
import '../viewmodel/baby_view_model.dart';
import 'widgets/parent_image_selector.dart';
import 'widgets/gender_option.dart';
import 'widgets/create_baby_button.dart';

class BabyView extends StatelessWidget {
  const BabyView({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => BabyViewModel(),
      child: _BabyViewContent(),
    );
  }
}

class _BabyViewContent extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GradientScaffold(
      appBar: AppBar(
        title: const Text('Bebeğinizi Oluşturun'),
        centerTitle: true,
      ),
      body: Consumer<BabyViewModel>(
        builder: (context, viewModel, child) {
          return Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                Text(
                  'Ebeveyn Fotoğrafları',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ParentImageSelector(
                      title: 'Anne',
                      subtitle: 'Fotoğraf Seç',
                      image: viewModel.parent1Image,
                      onSelect: viewModel.selectParent1Image,
                      isLoading: viewModel.isLoading,
                    ),
                    SizedBox(
                      height: 150,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.favorite,
                            color: ColorConstants.primary.withOpacity(0.5),
                            size: 30,
                          ),
                        ],
                      ),
                    ),
                    ParentImageSelector(
                      title: 'Baba',
                      subtitle: 'Fotoğraf Seç',
                      image: viewModel.parent2Image,
                      onSelect: viewModel.selectParent2Image,
                      isLoading: viewModel.isLoading,
                    ),
                  ],
                ),
                const SizedBox(height: 40),
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: ColorConstants.surface,
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(
                      color: ColorConstants.primary.withOpacity(0.1),
                    ),
                  ),
                  child: Column(
                    children: [
                      Text(
                        'Bebeğin Cinsiyeti',
                        style: Theme.of(context).textTheme.headlineMedium,
                      ),
                      const SizedBox(height: 20),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          GenderOption(
                            icon: Icons.male,
                            label: 'Erkek',
                            isSelected: viewModel.selectedGender == Gender.male,
                            onTap: () => viewModel.selectGender(Gender.male),
                          ),
                          GenderOption(
                            icon: Icons.female,
                            label: 'Kız',
                            isSelected: viewModel.selectedGender == Gender.female,
                            onTap: () => viewModel.selectGender(Gender.female),
                          ),
                          GenderOption(
                            icon: Icons.help_outline,
                            label: 'Sürpriz',
                            isSelected: viewModel.selectedGender == Gender.surprise,
                            onTap: () => viewModel.selectGender(Gender.surprise),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                const Spacer(),
                CreateBabyButton(
                  isEnabled: viewModel.canGenerate,
                  onPressed: () {
                    // Oluşturma işlemi
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';
import '../../../../core/constants/color_constants.dart';

class CreateBabyButton extends StatelessWidget {
  final bool isEnabled;
  final VoidCallback? onPressed;

  const CreateBabyButton({
    super.key,
    required this.isEnabled,
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: isEnabled ? onPressed : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: ColorConstants.primary,
          foregroundColor: Colors.white,
          disabledBackgroundColor: ColorConstants.primary.withOpacity(0.3),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          elevation: isEnabled ? 5 : 0,
          shadowColor: isEnabled ? ColorConstants.primary.withOpacity(0.5) : Colors.transparent,
        ),
        child: const Text(
          'Bebeği Oluştur',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import '../../../../core/constants/color_constants.dart';

class ParentImageSelector extends StatelessWidget {
  final String title;
  final String subtitle;
  final String? image;
  final Function(ImageSource) onSelect;
  final bool isLoading;

  const ParentImageSelector({
    super.key,
    required this.title,
    required this.subtitle,
    required this.image,
    required this.onSelect,
    this.isLoading = false,
  });

  Future<void> _showImageSourceDialog(BuildContext context) async {
    await showModalBottomSheet(
      context: context,
      backgroundColor: ColorConstants.surface,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Fotoğraf Seç',
              style: TextStyle(
                color: ColorConstants.textPrimary,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _OptionButton(
                  icon: Icons.camera_alt,
                  label: 'Kamera',
                  onTap: () {
                    onSelect(ImageSource.camera);
                    Navigator.pop(context);
                  },
                ),
                _OptionButton(
                  icon: Icons.photo_library,
                  label: 'Galeri',
                  onTap: () {
                    onSelect(ImageSource.gallery);
                    Navigator.pop(context);
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(
          title,
          style: const TextStyle(
            color: ColorConstants.textPrimary,
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 10),
        GestureDetector(
          onTap: isLoading ? null : () => _showImageSourceDialog(context),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            width: 140,
            height: 140,
            decoration: BoxDecoration(
              color: ColorConstants.surface,
              borderRadius: BorderRadius.circular(20),
              border: Border.all(
                color: image != null ? ColorConstants.primary : ColorConstants.textSecondary,
                width: 2,
              ),
              boxShadow: [
                BoxShadow(
                  color: ColorConstants.primary.withOpacity(0.1),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(18),
              child: isLoading
                  ? const Center(
                      child: CircularProgressIndicator(),
                    )
                  : image != null
                      ? Stack(
                          fit: StackFit.expand,
                          children: [
                            Image.file(
                              File(image!),
                              fit: BoxFit.cover,
                            ),
                            Container(
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  begin: Alignment.topCenter,
                                  end: Alignment.bottomCenter,
                                  colors: [
                                    Colors.transparent,
                                    Colors.black.withOpacity(0.5),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        )
                      : Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.add_photo_alternate_outlined,
                              size: 40,
                              color: ColorConstants.primary.withOpacity(0.5),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              subtitle,
                              style: const TextStyle(
                                color: ColorConstants.textSecondary,
                                fontSize: 12,
                              ),
                            ),
                          ],
                        ),
            ),
          ),
        ),
      ],
    );
  }
}

class _OptionButton extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback onTap;

  const _OptionButton({
    required this.icon,
    required this.label,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(15),
      child: Container(
        width: 100,
        padding: const EdgeInsets.symmetric(vertical: 15),
        decoration: BoxDecoration(
          color: ColorConstants.primary.withOpacity(0.1),
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            Icon(
              icon,
              color: ColorConstants.primary,
              size: 32,
            ),
            const SizedBox(height: 8),
            Text(
              label,
              style: const TextStyle(
                color: ColorConstants.textPrimary,
                fontSize: 14,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import '../../../../core/constants/animation_constants.dart';
import '../../../../core/constants/color_constants.dart';

class GenderOption extends StatelessWidget {
  final IconData icon;
  final String label;
  final bool isSelected;
  final VoidCallback onTap;

  const GenderOption({
    super.key,
    required this.icon,
    required this.label,
    required this.isSelected,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: AnimatedContainer(
        duration: AppAnimation.normal,
        width: 100,
        padding: const EdgeInsets.symmetric(vertical: 16),
        decoration: BoxDecoration(
          color: isSelected ? ColorConstants.primary.withOpacity(0.1) : ColorConstants.surface,
          borderRadius: BorderRadius.circular(15),
          border: Border.all(
            color: isSelected ? ColorConstants.primary : ColorConstants.primary.withOpacity(0.1),
            width: 2,
          ),
          boxShadow: isSelected
              ? [
                  BoxShadow(
                    color: ColorConstants.primary.withOpacity(0.2),
                    blurRadius: 10,
                    offset: const Offset(0, 5),
                  )
                ]
              : [],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            AppAnimation.scaleAnimation(
              isSelected: isSelected,
              child: Icon(
                icon,
                size: 32,
                color: isSelected ? ColorConstants.primary : ColorConstants.textSecondary,
              ),
            ),
            const SizedBox(height: 8),
            AnimatedDefaultTextStyle(
              duration: AppAnimation.fast,
              style: TextStyle(
                color: isSelected ? ColorConstants.primary : ColorConstants.textSecondary,
                fontSize: isSelected ? 16 : 14,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
              ),
              child: Text(label),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';

class AvatarsViewModel extends ChangeNotifier {
  // Avatar özelliğine özgü state ve business logic buraya gelecek
}
import 'package:flutter/material.dart';
import 'package:imageifyai/core/widgets/gradient_scaffold.dart';
import 'package:provider/provider.dart';
import '../viewmodel/avatars_view_model.dart';

class AvatarsView extends StatelessWidget {
  const AvatarsView({super.key});

  @override
  Widget build(BuildContext context) {
    return GradientScaffold(
      appBar: AppBar(title: const Text('Avatars')),
      body: Consumer<AvatarsViewModel>(
        builder: (context, viewModel, child) {
          return const Center(
            child: Text('Avatars Feature'),
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:imageifyai/core/constants/app_constants.dart';
import 'package:imageifyai/core/theme/app_theme.dart';
import 'package:imageifyai/features/home/view/home_view.dart';
import 'package:provider/provider.dart';
import 'features/navigation_bar/navigation_bar_manager.dart';
import 'features/home/viewmodel/home_view_model.dart';
import 'features/avatars/viewmodel/avatars_view_model.dart';
import 'features/filters/viewmodel/filters_view_model.dart';
import 'features/tattoo/viewmodel/tattoo_view_model.dart';
import 'features/baby/viewmodel/baby_view_model.dart';
import 'features/text_to_image/viewmodel/text_to_image_view_model.dart';

void main() {
  runApp(MultiProvider(providers: [
    ChangeNotifierProvider(create: (_) => NavigationBarManager()),
    ChangeNotifierProvider(create: (_) => HomeViewModel()),
    ChangeNotifierProvider(create: (_) => AvatarsViewModel()),
    ChangeNotifierProvider(create: (_) => FiltersViewModel()),
    ChangeNotifierProvider(create: (_) => TattooViewModel()),
    ChangeNotifierProvider(create: (_) => BabyViewModel()),
    ChangeNotifierProvider(create: (_) => TextToImageViewModel()),
  ], child: const MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: AppConstants.appName,
      theme: AppTheme.darkTheme,
      home: HomeView(),
    );
  }
}
//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.5

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:image_picker_android/image_picker_android.dart';
import 'package:image_picker_ios/image_picker_ios.dart';
import 'package:file_selector_linux/file_selector_linux.dart';
import 'package:image_picker_linux/image_picker_linux.dart';
import 'package:file_selector_macos/file_selector_macos.dart';
import 'package:image_picker_macos/image_picker_macos.dart';
import 'package:file_selector_windows/file_selector_windows.dart';
import 'package:image_picker_windows/image_picker_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        ImagePickerAndroid.registerWith();
      } catch (err) {
        print(
          '`image_picker_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        ImagePickerIOS.registerWith();
      } catch (err) {
        print(
          '`image_picker_ios` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        FileSelectorLinux.registerWith();
      } catch (err) {
        print(
          '`file_selector_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerLinux.registerWith();
      } catch (err) {
        print(
          '`image_picker_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        FileSelectorMacOS.registerWith();
      } catch (err) {
        print(
          '`file_selector_macos` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerMacOS.registerWith();
      } catch (err) {
        print(
          '`image_picker_macos` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        FileSelectorWindows.registerWith();
      } catch (err) {
        print(
          '`file_selector_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        ImagePickerWindows.registerWith();
      } catch (err) {
        print(
          '`image_picker_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}
